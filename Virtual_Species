#######Virtual Species 1##########
para_s1<- formatFunctions(temp=c(fun='dnorm', mean = 25, sd = 5),
                          preci=c(fun='dnorm', mean =2500, sd=1500),
                          elev= c(fun='dnorm', mean=1000, sd=1000))

s1<- generateSpFromFun(raster.stack = envi[[c("temp", "preci", "elev")]],parameters = para_s1, plot = TRUE)
s1_pa <- convertToPA(s1, prob.method="logistic",alpha = -0.05, beta = "random", species.prevalence= 0.05)

s1_suit<-plotSuitabilityToProba(s1_pa)
s1_res<-plotResponse(s1_pa)

#T=sum, overlap
s1_T1 <- sampleOccurrences(s1_pa,n = 427,type = "presence-absence", extract.probability = TRUE,plot = F,replacement = T, sample.prevalence = 0.25)
s1_T2 <- sampleOccurrences(s1_pa,n = 3861,type = "presence-absence", extract.probability = TRUE,plot = F, replacement = T,sample.prevalence = 0.25)
s1_T3 <- sampleOccurrences(s1_pa,n = 7744,type = "presence-absence", extract.probability = TRUE,plot = F, replacement = T, sample.prevalence = 0.25)
#t=single range, not overlap
s1_t1 <- sampleOccurrences(s1_pa,n = 427,type = "presence-absence", extract.probability = TRUE,plot = F,replacement = T, sample.prevalence = 0.25)
s1_t2 <- sampleOccurrences(s1_pa,n = 3434,type = "presence-absence", extract.probability = TRUE,plot = F,replacement = T, sample.prevalence = 0.25)
s1_t3 <- sampleOccurrences(s1_pa,n = 4606,type = "presence-absence", extract.probability = TRUE,plot = F, replacement = T, sample.prevalence = 0.25)

########GLM########
####non overlapping time scale (t)
##s1_t1
#extract PA points, then exchange it into geographical vari by giving it coordinates and crs
PresAbs.s1t1=s1_t1$sample.points[, c( "x", "y", "Observed")]
coordinates(PresAbs.s1t1)<-~x+y
crs(PresAbs.s1t1)<-crs(envi)

#extract the envi vari value in the coordinates of each sample points 
values.s1t1<- raster::extract(envi, PresAbs.s1t1, df=T)
values.s1t1<- values.s1t1[, -1] # first column not need it
modSpecies.s1t1<-data.frame(pres= PresAbs.s1t1$Observed, values.s1t1[1:ncol(values.s1t1)])

preds<- envi
glm.s1t1<-multGLM(modSpecies.s1t1, sp.cols = 1, var.cols=2:ncol(modSpecies.s1t1), family = "binomial", trim = FALSE, step=F,Y.prediction =FALSE, P.prediction =TRUE,FDR = FALSE, Favourability =FALSE, test.sample = 0.2) 
Pred.glm.s1t1<- getPreds(preds, models=glm.s1t1$models, id.col = NULL, Y = FALSE, P = TRUE, Favourability =FALSE)
prediction.glm.s1t1<- data.frame(glm.s1t1$predictions)
crs(Pred.glm.s1t1) <- crs(envi)
plot(Pred.glm.s1t1, main= "s1_t1 by GLM")


##s1_t2
#extract PA points, then exchange it into geographical vari by giving it coordinates and crs
PresAbs.s1t2=s1_t2$sample.points[, c( "x", "y", "Observed")]
coordinates(PresAbs.s1t2)<-~x+y
crs(PresAbs.s1t2)<-crs(envi)

#extract the envi vari value in the coordinates of each sample points 
values.s1t2<- raster::extract(envi, PresAbs.s1t2, df=T)
values.s1t2<- values.s1t2[, -1] # first column not need it
modSpecies.s1t2<-data.frame(pres= PresAbs.s1t2$Observed, values.s1t2[1:ncol(values.s1t2)])

preds<- envi
glm.s1t2<-multGLM(modSpecies.s1t2, sp.cols = 1, var.cols=2:ncol(modSpecies.s1t2), family = "binomial", trim = FALSE, step=F,Y.prediction =FALSE, P.prediction =TRUE,FDR = FALSE, Favourability =FALSE, test.sample = 0.2) 
Pred.glm.s1t2<- getPreds(preds, models=glm.s1t2$models, id.col = NULL, Y = FALSE, P = TRUE, Favourability =FALSE)
crs(Pred.glm.s1t2) <- crs(envi)
plot(Pred.glm.s1t2, main= " s1_t2 by GLM")


#s1_t3
#extract PA points, then exchange it into geographical vari by giving it coordinates and crs
PresAbs.s1t3=s1_t3$sample.points[, c( "x", "y", "Observed")]
coordinates(PresAbs.s1t3)<-~x+y
crs(PresAbs.s1t3)<-crs(envi)

#extract the envi vari value in the coordinates of each sample points 
values.s1t3<- raster::extract(envi, PresAbs.s1t3, df=T)
values.s1t3<- values.s1t3[, -1] # first column not need it
modSpecies.s1t3<-data.frame(pres= PresAbs.s1t3$Observed, values.s1t3[1:ncol(values.s1t3)])

preds<- envi
glm.s1t3<-multGLM(modSpecies.s1t3, sp.cols = 1, var.cols=2:ncol(modSpecies.s1t3), family = "binomial", trim = FALSE, step=F,Y.prediction =FALSE, P.prediction =TRUE,FDR = FALSE, Favourability =FALSE, test.sample = 0.2) 
Pred.glm.s1t3<- getPreds(preds, models=glm.s1t3$models, id.col = NULL, Y = FALSE, P = TRUE, Favourability =FALSE)

crs(Pred.glm.s1t3) <- crs(envi)
plot(Pred.glm.s1t3, main= "s1_t3 by GLM")

##overlapping timescale (T)
##s1_T1

#extract PA points, then exchange it into geographical vari by giving it coordinates and crs
PresAbs.s1T1=s1_T1$sample.points[, c( "x", "y", "Observed")]
coordinates(PresAbs.s1T1)<-~x+y
crs(PresAbs.s1T1)<-crs(envi)

#extract the envi vari value in the coordinates of each sample points 
values.s1T1<- raster::extract(envi, PresAbs.s1T1, df=T)
values.s1T1<- values.s1T1[, -1] # first column not need it
modSpecies.s1T1<-data.frame(pres= PresAbs.s1T1$Observed,values.s1T1[1:ncol(values.s1T1)])

preds<- envi
glm.s1T1<-multGLM(modSpecies.s1T1, sp.cols = 1, var.cols=2:ncol(modSpecies.s1T1), family = "binomial", trim = FALSE, step=F,Y.prediction =FALSE, P.prediction =TRUE,FDR = FALSE, Favourability =FALSE, test.sample = 0.2) 
Pred.glm.s1T1<- getPreds(preds, models=glm.s1T1$models, id.col = NULL, Y = FALSE, P = TRUE, Favourability =FALSE)
crs(Pred.glm.s1T1) <- crs(envi)
plot(Pred.glm.s1T1, main= "s1_T1 by GLM")


##s1_T2
PresAbs.s1T2=s1_T2$sample.points[, c( "x", "y", "Observed")]
coordinates(PresAbs.s1T2)<-~x+y
crs(PresAbs.s1T2)<-crs(envi)

#extract the envi vari value in the coordinates of each sample points 
values.s1T2<- raster::extract(envi, PresAbs.s1T2, df=T)
values.s1T2<- values.s1T2[, -1] # first column not need it
modSpecies.s1T2<-data.frame(pres= PresAbs.s1T2$Observed, values.s1T2[1:ncol(values.s1T2)])

preds<- envi
glm.s1T2<-multGLM(modSpecies.s1T2, sp.cols = 1, var.cols=2:ncol(modSpecies.s1T2), family = "binomial", trim = FALSE, step=F,Y.prediction =FALSE, P.prediction =TRUE,FDR = FALSE, Favourability =FALSE, test.sample = 0.2) 
Pred.glm.s1T2<- getPreds(preds, models=glm.s1T2$models, id.col = NULL, Y = FALSE, P = TRUE, Favourability =FALSE)
crs(Pred.glm.s1T2) <- crs(envi)
plot(Pred.glm.s1T2, main= "s1_T2 by GLM")

##s1_T3
PresAbs.s1T3=s1_T3$sample.points[, c( "x", "y", "Observed")]
coordinates(PresAbs.s1T3)<-~x+y
crs(PresAbs.s1T3)<-crs(envi)

#extract the envi vari value in the coordinates of each sample points 
values.s1T3<- raster::extract(envi, PresAbs.s1T3, df=T)
values.s1T3<- values.s1T3[, -1] # first column not need it
modSpecies.s1T3<-data.frame(pres= PresAbs.s1T3$Observed, values.s1T3[1:ncol(values.s1T3)])

preds<- envi
glm.s1T3<-multGLM(modSpecies.s1T3, sp.cols = 1, var.cols=2:ncol(modSpecies.s1T3), family = "binomial", trim = FALSE, step=F,Y.prediction =FALSE, P.prediction =TRUE,FDR = FALSE, Favourability =FALSE, test.sample = 0.2) 
Pred.glm.s1T3<- getPreds(preds, models=glm.s1T3$models, id.col = NULL, Y = FALSE, P = TRUE, Favourability =FALSE)
crs(Pred.glm.s1T3) <- crs(envi)
plot(Pred.glm.s1T3, main= "s1_T3 by GLM")


####GAM####
###building function for GAM model with train/test split
GAM_sp <- function(x,TrainValue = 0.8, TestValue = 0.2) {
  library(groupdata2)
  library(ROCR)
  
  set.seed(999)
  inds <- partition(x, p = c(train = TrainValue, test = TestValue))
  train <- as.data.frame(inds[1])
  test <- as.data.frame(inds[2])
  validation<-test
  training<-train
  sp_cols <- 1
  pred_cols <- 2:ncol(training)
  names(training)[sp_cols]
  names(training)[pred_cols]
  form_gam <- as.formula(paste0(names(training)[sp_cols], "~", paste0("s(", names(training)[pred_cols], ")", collapse = "+")))
  Model <- gam(form_gam, family = binomial, data = training)
  return(Model)
}
## newdata for prediction

preds <- as.data.frame(envi) %>%drop_na() #Predictors[[myRandNum]] should be envi
predsXY <- as.data.frame(envi, xy=T) %>%drop_na()

###Non-overlapping time scale

## s1_t1
gam.s1t1 <- GAM_sp(modSpecies.s1t1)
prediction.gam.s1t1<- predict(gam.s1t1,newdata = predsXY, type = "response")
df.pred.s1t1 <- data.frame(Pred=prediction.gam.s1t1)
prediction.gam.s1t1 <- data.frame(predsXY[,1:2], df.pred.s1t1$Pred)

Pred.gam.s1t1 <- rasterFromXYZ(prediction.gam.s1t1, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.gam.s1t1, main=" s1_t1 by GAM")

## s1_t2
gam.s1t2 <- GAM_sp(modSpecies.s1t2)
prediction.gam.s1t2<- predict(gam.s1t2, newdata = predsXY, type = "response")
df.pred.s1t2 <- data.frame(Pred=prediction.gam.s1t2)
prediction.gam.s1t2 <- data.frame(predsXY[,1:2], df.pred.s1t2$Pred)

Pred.gam.s1t2 <- rasterFromXYZ(prediction.gam.s1t2, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.gam.s1t2, main=" s1_t2 by GAM")

## s1_t3
gam.s1t3 <- GAM_sp( modSpecies.s1t3)
prediction.gam.s1t3<- predict(gam.s1t3, newdata = predsXY, type = "response")
df.pred.s1t3 <- data.frame(Pred=prediction.gam.s1t3)
prediction.gam.s1t3 <- data.frame(predsXY[,1:2], df.pred.s1t3$Pred)

Pred.gam.s1t3 <- rasterFromXYZ(prediction.gam.s1t3, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.gam.s1t3, main="s1_t3 by GAM")


###overlapping timescale###

## s1_T1
gam.s1T1 <- GAM_sp(modSpecies.s1T1)
prediction.gam.s1T1<- predict(gam.s1T1, newdata = predsXY, type = "response")
df.pred.s1T1 <- data.frame(Pred=prediction.gam.s1T1)
prediction.gam.s1T1 <- data.frame(predsXY[,1:2], df.pred.s1T1$Pred)

Pred.gam.s1T1 <- rasterFromXYZ(prediction.gam.s1T1, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.gam.s1T1, main=" s1_T1 by GAM")

## s1_T2
gam.s1T2 <- GAM_sp(modSpecies.s1T2)
prediction.gam.s1T2<- predict(gam.s1T2, newdata = predsXY, type = "response")
df.pred.s1T2 <- data.frame(Pred=prediction.gam.s1T2)
prediction.gam.s1T2 <- data.frame(predsXY[,1:2], df.pred.s1T2$Pred)

Pred.gam.s1T2 <- rasterFromXYZ(prediction.gam.s1T2, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.gam.s1T2, main=" s1_T2 by GAM")

## s1_T3
gam.s1T3 <- GAM_sp(modSpecies.s1T3)
prediction.gam.s1T3<- predict(gam.s1T3, newdata = predsXY, type = "response")
df.pred.s1T3 <- data.frame(Pred=prediction.gam.s1T3)
prediction.gam.s1T3 <- data.frame(predsXY[,1:2], df.pred.s1T3$Pred)

Pred.gam.s1T3 <- rasterFromXYZ(prediction.gam.s1T3, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.gam.s1T3, main=" s1_T3 by GAM")

#####Random Forest####

##a function for ranger split data
ranger_sp <- function(x,TrainValue = 0.8, TestValue = 0.2) {
  library(groupdata2)
  library(ROCR)
  
  set.seed(999)
  inds <- partition(x, p = c(train = TrainValue, test = TestValue))
  train <- as.data.frame(inds[1])
  test <- as.data.frame(inds[2])
  validation<-test
  training<-train
  
  Model<-ranger(training$pres ~., data= training, importance='impurity')
  return(Model)
  }
###Non-overlapping (t)

#s1_t1
rf.s1t1<- ranger_sp(modSpecies.s1t1)
Pred.rf.s1t1<- predict(
  rf.s1t1,
  data =predsXY,
  predict.all = FALSE,
  num.trees = rf.s1t1$num.trees)

prediction.rf.s1t1 <- data.frame(predsXY[,1:2], Pred.rf.s1t1$predictions)
prediction.rf.s1t1$Pred.rf.s1t1.predictions[ prediction.rf.s1t1$Pred.predictions == 1] <- 1 - 2.2e-16  #so that the probability is not 100% (too arrogant) but a smaller amount that is the most significant close to 1
Pred.rf.s1t1 <- rasterFromXYZ(prediction.rf.s1t1, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.rf.s1t1, main= "s1_t1 by RF")


#s1_t2
rf.s1t2<-ranger_sp(modSpecies.s1t2) 
Pred.rf.s1t2<- predict(
  rf.s1t2,
  data =predsXY,
  predict.all = FALSE,
  num.trees = rf.s1t2$num.trees)

prediction.rf.s1t2 <- data.frame(predsXY[,1:2], Pred.rf.s1t2$predictions)
prediction.rf.s1t2$Pred.rf.s1t2.predictions[ prediction.rf.s1t2$Pred.predictions == 1] <- 1 - 2.2e-16 
Pred.rf.s1t2 <- rasterFromXYZ(prediction.rf.s1t2, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.rf.s1t2, main= "s1_t2 by RF")

#s1_t3
rf.s1t3<-ranger_sp(modSpecies.s1t3) 
Pred.rf.s1t3<- predict(
  rf.s1t3,
  data =predsXY,
  predict.all = FALSE,
  num.trees = rf.s1t3$num.trees)

prediction.rf.s1t3 <- data.frame(predsXY[,1:2], Pred.rf.s1t3$predictions)
prediction.rf.s1t3$Pred.rf.s1t3.predictions[ prediction.rf.s1t3$Pred.predictions == 1] <- 1 - 2.2e-16 
Pred.rf.s1t3 <- rasterFromXYZ(prediction.rf.s1t3, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.rf.s1t3, main= "s1_t3 by RF")


### overlapping timescale (T)
#s1_T1
rf.s1T1<-ranger_sp(modSpecies.s1T1)
Pred.rf.s1T1<- predict(
  rf.s1T1,
  data =predsXY,
  predict.all = FALSE,
  num.trees = rf.s1T1$num.trees)

prediction.rf.s1T1 <- data.frame(predsXY[,1:2], Pred.rf.s1T1$predictions)
prediction.rf.s1T1$Pred.rf.s1T1.predictions[ prediction.rf.s1T1$Pred.predictions == 1] <- 1 - 2.2e-16  #so that the probability is not 100% (too arrogant) but a smaller amount that is the most significant close to 1
Pred.rf.s1T1 <- rasterFromXYZ(prediction.rf.s1T1, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.rf.s1T1, main= "s1_T1 by RF")


#s1_T2
rf.s1T2<-ranger_sp(modSpecies.s1T2)
Pred.rf.s1T2<- predict(
  rf.s1T2,
  data =predsXY,
  predict.all = FALSE,
  num.trees = rf.s1T2$num.trees)

prediction.rf.s1T2 <- data.frame(predsXY[,1:2], Pred.rf.s1T2$predictions)
prediction.rf.s1T2$Pred.rf.s1T2.predictions[ prediction.rf.s1T2$Pred.predictions == 1] <- 1 - 2.2e-16 
Pred.rf.s1T2 <- rasterFromXYZ(prediction.rf.s1T2, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.rf.s1T2, main= "s1_T2 by RF")

#s1_T3
rf.s1T3<-ranger_sp(modSpecies.s1T3)
Pred.rf.s1T3<- predict(
  rf.s1T3,
  data =predsXY,
  predict.all = FALSE,
  num.trees = rf.s1T3$num.trees)

prediction.rf.s1T3 <- data.frame(predsXY[,1:2], Pred.rf.s1T3$predictions)
prediction.rf.s1T3$Pred.rf.s1T3.predictions[ prediction.rf.s1T3$Pred.predictions == 1] <- 1 - 2.2e-16 
Pred.rf.s1T3 <- rasterFromXYZ(prediction.rf.s1T3, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.rf.s1T3, main= "s1_T3 by RF")

############EVALUATION PERFORMANCE############

#####Create table of results
auc.gam.s1.t1<- AUCFunzGAM(modSpecies.s1t1)
auc.gam.s1.t2<- AUCFunzGAM(modSpecies.s1t2)
auc.gam.s1.t3<- AUCFunzGAM(modSpecies.s1t3)

auc.gam.s1.T1<- AUCFunzGAM(modSpecies.s1T1)
auc.gam.s1.T2<- AUCFunzGAM(modSpecies.s1T2)
auc.gam.s1.T3<- AUCFunzGAM(modSpecies.s1T3)



auc.glm.s1.t1<- AUCFunzGLM(modSpecies.s1t1)
auc.glm.s1.t2<- AUCFunzGLM(modSpecies.s1t2)
auc.glm.s1.t3<- AUCFunzGLM(modSpecies.s1t3)

auc.glm.s1.T1<- AUCFunzGLM(modSpecies.s1T1)
auc.glm.s1.T2<- AUCFunzGLM(modSpecies.s1T2)
auc.glm.s1.T3<- AUCFunzGLM(modSpecies.s1T3)



auc.rf.s1.t1<- AUCFunzRF(modSpecies.s1t1)
auc.rf.s1.t2<- AUCFunzRF(modSpecies.s1t2)
auc.rf.s1.t3<- AUCFunzRF(modSpecies.s1t3)

auc.rf.s1.T1<- AUCFunzRF(modSpecies.s1T1)
auc.rf.s1.T2<- AUCFunzRF(modSpecies.s1T2)
auc.rf.s1.T3<- AUCFunzRF(modSpecies.s1T3)



tss.glm.s1.t1<- TSSFunzGLM(modSpecies.s1t1)
tss.glm.s1.t2<- TSSFunzGLM(modSpecies.s1t2)
tss.glm.s1.t3<- TSSFunzGLM(modSpecies.s1t3)

tss.glm.s1.T1<- TSSFunzGLM(modSpecies.s1T1)
tss.glm.s1.T2<- TSSFunzGLM(modSpecies.s1T2)
tss.glm.s1.T3<- TSSFunzGLM(modSpecies.s1T3)



tss.gam.s1.t1<- TSSFunzGAM(modSpecies.s1t1)
tss.gam.s1.t2<- TSSFunzGAM(modSpecies.s1t2)
tss.gam.s1.t3<- TSSFunzGAM(modSpecies.s1t3)

tss.gam.s1.T1<- TSSFunzGAM(modSpecies.s1T1)
tss.gam.s1.T2<- TSSFunzGAM(modSpecies.s1T2)
tss.gam.s1.T3<- TSSFunzGAM(modSpecies.s1T3)



tss.rf.s1.t1<- TSSFunzRF(modSpecies.s1t1)
tss.rf.s1.t2<- TSSFunzRF(modSpecies.s1t2)
tss.rf.s1.t3<- TSSFunzRF(modSpecies.s1t3)

tss.rf.s1.T1<- TSSFunzRF(modSpecies.s1T1)
tss.rf.s1.T2<- TSSFunzRF(modSpecies.s1T2)
tss.rf.s1.T3<- TSSFunzRF(modSpecies.s1T3)



boyce.glm.s1.t1<- BoyceGLM(modSpecies.s1t1)
boyce.glm.s1.t2<- BoyceGLM(modSpecies.s1t2)
boyce.glm.s1.t3<- BoyceGLM(modSpecies.s1t3)

boyce.glm.s1.T1<- BoyceGLM(modSpecies.s1T1)
boyce.glm.s1.T2<- BoyceGLM(modSpecies.s1T2)
boyce.glm.s1.T3<- BoyceGLM(modSpecies.s1T3)


boyce.gam.s1.t1<- BoyceGAM(modSpecies.s1t1)
boyce.gam.s1.t2<- BoyceGAM(modSpecies.s1t2)
boyce.gam.s1.t3<- BoyceGAM(modSpecies.s1t3)

boyce.gam.s1.T1<- BoyceGAM(modSpecies.s1T1)
boyce.gam.s1.T2<- BoyceGAM(modSpecies.s1T2)
boyce.gam.s1.T3<- BoyceGAM(modSpecies.s1T3)


boyce.rf.s1.t1<- BoyceRF(modSpecies.s1t1)
boyce.rf.s1.t2<- BoyceRF(modSpecies.s1t2)
boyce.rf.s1.t3<- BoyceRF(modSpecies.s1t3)

boyce.rf.s1.T1<- BoyceRF(modSpecies.s1T1)
boyce.rf.s1.T2<- BoyceRF(modSpecies.s1T2)
boyce.rf.s1.T3<- BoyceRF(modSpecies.s1T3)



#########Evaluation####
algorithm<- rep(c("GAM", "GLM", "RF"), each=6)
temporal_period<-rep(c("t1", "t2", "t3", 'T1', "T2", "T3"), times = 3)
temporal_setting<- rep(c("non-overlapping", "overlapping"),each=3, times=3)
AUC <- c(auc.gam.s1.t1,auc.gam.s1.T1, auc.gam.s1.t2, auc.gam.s1.T2, auc.gam.s1.t3, auc.gam.s1.T3,
         auc.glm.s1.t1,auc.glm.s1.T1, auc.glm.s1.t2, auc.glm.s1.T2, auc.glm.s1.t3, auc.glm.s1.T3,
         auc.rf.s1.t1,auc.rf.s1.T1, auc.rf.s1.t2, auc.rf.s1.T2, auc.rf.s1.t3, auc.rf.s1.T3)
TSS<- c(tss.gam.s1.t1, tss.gam.s1.T1, tss.gam.s1.t2, tss.gam.s1.T2, tss.gam.s1.t3, tss.gam.s1.T3,
        tss.glm.s1.t1, tss.glm.s1.T1, tss.glm.s1.t2, tss.glm.s1.T2, tss.glm.s1.t3, tss.glm.s1.T3,
        tss.rf.s1.t1, tss.rf.s1.T1, tss.rf.s1.t2, tss.rf.s1.T2, tss.rf.s1.t3, tss.rf.s1.T3)
Boyce<- c(boyce.gam.s1.t1, boyce.gam.s1.T1, boyce.gam.s1.t2, boyce.gam.s1.T2, boyce.gam.s1.t3, boyce.gam.s1.T3,
          boyce.glm.s1.t1, boyce.glm.s1.T1, boyce.glm.s1.t2, boyce.glm.s1.T2, boyce.glm.s1.t3, boyce.glm.s1.T3,
          boyce.rf.s1.t1, boyce.rf.s1.T1, boyce.rf.s1.t2, boyce.rf.s1.T2, boyce.rf.s1.t3, boyce.rf.s1.T3)
perf_df <- data.frame(algorithm, temporal_setting,temporal_period, AUC, TSS, Boyce)

mean_perf <- perf_df %>%
  group_by(algorithm, temporal_setting) %>%
  summarize(AUC = mean(AUC), TSS = mean(TSS), Boyce = mean(Boyce))

# Melt the data frame to long format for plotting
melted_perf <- mean_perf %>% 
  pivot_longer(cols = c(AUC, TSS, Boyce), names_to = "metric", values_to = "value")

# Create scatterplot with mean performance values
ggplot(melted_perf, aes(x = algorithm, y = value, color = temporal_setting, shape = temporal_setting)) +
  geom_point(size = 5) +
  facet_grid(.~metric, scales = "free_y", space = "free_x") +
  labs(title = "Mean Performance of SDM Algorithms for Virtual Species 1", x = "Algorithms", y = "Mean Performance") +
  scale_color_manual(values = c("blue", "red")) +
  scale_shape_manual(values = c(22, 25)) +
  theme_minimal()+
  theme(panel.border = element_rect(color = "black", fill = NA),
        panel.background = element_rect(fill = "white"))
########################################################        
#################VIRTUAL SPECIES 2######################
########################################################
para_s2<- formatFunctions(temp=c(fun='dnorm', mean = 27, sd = 5),
                          preci=c(fun='dnorm', mean =2500, sd=1500),
                          elev= c(fun='dnorm', mean=750, sd=750))

s2<- generateSpFromFun(raster.stack = envi[[c("temp", "preci", "elev")]],parameters = para_s2, plot = TRUE)
s2_pa <- convertToPA(s2, prob.method="logistic",alpha = -0.05, beta = "random", species.prevalence= 0.05)

s2_suit<-plotSuitabilityToProba(s2_pa)
s2_res<-plotResponse(s2_pa)

#T=sum, overlap
s2_T1 <- sampleOccurrences(s2_pa,n = 4420,type = "presence-absence", extract.probability = TRUE,plot = T, replacement = T,sample.prevalence = 0.25)
s2_T2 <- sampleOccurrences(s2_pa,n = 7971,type = "presence-absence", extract.probability = TRUE,plot = F, replacement = T, sample.prevalence = 0.25)
s2_T3 <- sampleOccurrences(s2_pa,n = 12921,type = "presence-absence", extract.probability = TRUE,plot = F, replacement = T, sample.prevalence = 0.25)
#t=single range, not overlap
s2_t1 <- sampleOccurrences(s2_pa,n = 4420,type = "presence-absence", extract.probability = TRUE,plot = F, replacement = T,sample.prevalence = 0.25)
s2_t2 <- sampleOccurrences(s2_pa,n = 5150,type = "presence-absence", extract.probability = TRUE,plot = F, replacement = T,sample.prevalence = 0.25)
s2_t3 <- sampleOccurrences(s2_pa,n = 10687,type = "presence-absence", extract.probability = TRUE,plot = F, replacement = T, sample.prevalence = 0.25)

########GLM########
####non overlapping time scale (t)
##s2_t1
#extract PA points, then exchange it into geographical vari by giving it coordinates and crs
PresAbs.s2t1=s2_t1$sample.points[, c( "x", "y", "Observed")]
coordinates(PresAbs.s2t1)<-~x+y
crs(PresAbs.s2t1)<-crs(envi)

#extract the envi vari value in the coordinates of each sample points 
values.s2t1<- raster::extract(envi, PresAbs.s2t1, df=T)
values.s2t1<- values.s2t1[, -1] # first column not need it
modSpecies.s2t1<-data.frame(pres= PresAbs.s2t1$Observed, values.s2t1[1:ncol(values.s2t1)])

preds<- envi
glm.s2t1<-multGLM(modSpecies.s2t1, sp.cols = 1, var.cols=2:ncol(modSpecies.s2t1), family = "binomial", trim = FALSE, step=F,Y.prediction =FALSE, P.prediction =TRUE,FDR = FALSE, Favourability =FALSE, test.sample = 0.2) 
Pred.glm.s2t1<- getPreds(preds, models=glm.s2t1$models, id.col = NULL, Y = FALSE, P = TRUE, Favourability =FALSE)
prediction.glm.s2t1<- data.frame(glm.s2t1$predictions)
crs(Pred.glm.s2t1) <- crs(envi)
plot(Pred.glm.s2t1, main= "Occurence Probability from 2000 to 2009 of Species 2 (s2_t1) by GLM")


##s2_t2
#extract PA points, then exchange it into geographical vari by giving it coordinates and crs
PresAbs.s2t2=s2_t2$sample.points[, c( "x", "y", "Observed")]
coordinates(PresAbs.s2t2)<-~x+y
crs(PresAbs.s2t2)<-crs(envi)

#extract the envi vari value in the coordinates of each sample points 
values.s2t2<- raster::extract(envi, PresAbs.s2t2, df=T)
values.s2t2<- values.s2t2[, -1] # first column not need it
modSpecies.s2t2<-data.frame(pres= PresAbs.s2t2$Observed, values.s2t2[1:ncol(values.s2t2)])

preds<- envi
glm.s2t2<-multGLM(modSpecies.s2t2, sp.cols = 1, var.cols=2:ncol(modSpecies.s2t2), family = "binomial", trim = FALSE, step=F,Y.prediction =FALSE, P.prediction =TRUE,FDR = FALSE, Favourability =FALSE, test.sample = 0.2) 
Pred.glm.s2t2<- getPreds(preds, models=glm.s2t2$models, id.col = NULL, Y = FALSE, P = TRUE, Favourability =FALSE)
crs(Pred.glm.s2t2) <- crs(envi)
plot(Pred.glm.s2t2, main= "Occurence Probability from 2010 to 2014 of Species 2 (s2_t2) by GLM")


#s2_t3
#extract PA points, then exchange it into geographical vari by giving it coordinates and crs
PresAbs.s2t3=s2_t3$sample.points[, c( "x", "y", "Observed")]
coordinates(PresAbs.s2t3)<-~x+y
crs(PresAbs.s2t3)<-crs(envi)

#extract the envi vari value in the coordinates of each sample points 
values.s2t3<- raster::extract(envi, PresAbs.s2t3, df=T)
values.s2t3<- values.s2t3[, -1] # first column not need it
modSpecies.s2t3<-data.frame(pres= PresAbs.s2t3$Observed, values.s2t3[1:ncol(values.s2t3)])

preds<- envi
glm.s2t3<-multGLM(modSpecies.s2t3, sp.cols = 1, var.cols=2:ncol(modSpecies.s2t3), family = "binomial", trim = FALSE, step=F,Y.prediction =FALSE, P.prediction =TRUE,FDR = FALSE, Favourability =FALSE, test.sample = 0.2) 
Pred.glm.s2t3<- getPreds(preds, models=glm.s2t3$models, id.col = NULL, Y = FALSE, P = TRUE, Favourability =FALSE)
crs(Pred.glm.s2t3) <- crs(envi)
plot(Pred.glm.s2t3, main= "Occurence Probability from 2015 to 2023 of Species 2 (s2_t3) by GLM")

####overlapping timescale (T)
##s2_T1
#extract PA points, then exchange it into geographical vari by giving it coordinates and crs
PresAbs.s2T1=s2_T1$sample.points[, c( "x", "y", "Observed")]
coordinates(PresAbs.s2T1)<-~x+y
crs(PresAbs.s2T1)<-crs(envi)

#extract the envi vari value in the coordinates of each sample points 
values.s2T1<- raster::extract(envi, PresAbs.s2T1, df=T)
values.s2T1<- values.s2T1[, -1] # first column not need it
modSpecies.s2T1<-data.frame(pres= PresAbs.s2T1$Observed,values.s2T1[1:ncol(values.s2T1)])

preds<- envi
glm.s2T1<-multGLM(modSpecies.s2T1, sp.cols = 1, var.cols=2:ncol(modSpecies.s2T1), family = "binomial", trim = FALSE, step=F,Y.prediction =FALSE, P.prediction =TRUE,FDR = FALSE, Favourability =FALSE, test.sample = 0.2) 
Pred.glm.s2T1<- getPreds(preds, models=glm.s2T1$models, id.col = NULL, Y = FALSE, P = TRUE, Favourability =FALSE)
crs(Pred.glm.s2T1) <- crs(envi)
plot(Pred.glm.s2T1, main= "Occurence Probability from 2000 to 2010 of Species 2 (s2_T1) by GLM")


##s2_T2
PresAbs.s2T2=s2_T2$sample.points[, c( "x", "y", "Observed")]
coordinates(PresAbs.s2T2)<-~x+y
crs(PresAbs.s2T2)<-crs(envi)

#extract the envi vari value in the coordinates of each sample points 
values.s2T2<- raster::extract(envi, PresAbs.s2T2, df=T)
values.s2T2<- values.s2T2[, -1] # first column not need it
modSpecies.s2T2<-data.frame(pres= PresAbs.s2T2$Observed, values.s2T2[1:ncol(values.s2T2)])

preds<- envi
glm.s2T2<-multGLM(modSpecies.s2T2, sp.cols = 1, var.cols=2:ncol(modSpecies.s2T2), family = "binomial", trim = FALSE, step=F,Y.prediction =FALSE, P.prediction =TRUE,FDR = FALSE, Favourability =FALSE, test.sample = 0.2) 
Pred.glm.s2T2<- getPreds(preds, models=glm.s2T2$models, id.col = NULL, Y = FALSE, P = TRUE, Favourability =FALSE)
crs(Pred.glm.s2T2) <- crs(envi)
plot(Pred.glm.s2T2, main= "Occurence Probability from 2000 to 2015 of Species 2 (s2_T2) by GLM")

##s2_T3
PresAbs.s2T3=s2_T3$sample.points[, c( "x", "y", "Observed")]
coordinates(PresAbs.s2T3)<-~x+y
crs(PresAbs.s2T3)<-crs(envi)

#extract the envi vari value in the coordinates of each sample points 
values.s2T3<- raster::extract(envi, PresAbs.s2T3, df=T)
values.s2T3<- values.s2T3[, -1] # first column not need it
modSpecies.s2T3<-data.frame(pres= PresAbs.s2T3$Observed, values.s2T3[1:ncol(values.s2T3)])

preds<- envi
glm.s2T3<-multGLM(modSpecies.s2T3, sp.cols = 1, var.cols=2:ncol(modSpecies.s2T3), family = "binomial", trim = FALSE, step=F,Y.prediction =FALSE, P.prediction =TRUE,FDR = FALSE, Favourability =FALSE, test.sample = 0.2) 
Pred.glm.s2T3<- getPreds(preds, models=glm.s2T3$models, id.col = NULL, Y = FALSE, P = TRUE, Favourability =FALSE)
crs(Pred.glm.s2T3) <- crs(envi)
plot(Pred.glm.s2T3, main= "Occurence Probability from 2000 to 2023 of Species 2 (s2_T3) by GLM")


###########GAM#################

## newdata for prediction
preds <- as.data.frame(envi) %>%drop_na() #Predictors[[myRandNum]] should be envi
predsXY <- as.data.frame(envi, xy=T) %>%drop_na()

###Non-overlapping time scale

## s2_t1
gam.s2t1 <- GAM_sp(modSpecies.s2t1)
prediction.gam.s2t1<- predict(gam.s2t1, newdata = predsXY, type = "response")
df.pred.s2t1 <- data.frame(Pred=prediction.gam.s2t1)
prediction.gam.s2t1 <- data.frame(predsXY[,1:2], df.pred.s2t1$Pred)

Pred.gam.s2t1 <- rasterFromXYZ(prediction.gam.s2t1, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.gam.s2t1, main=" Occurence Probability from 2000 to 2009 of Species 2 (s2_t1) by GAM")

## s2_t2
gam.s2t2 <- GAM_sp(modSpecies.s2t2)
prediction.gam.s2t2<- predict(gam.s2t2, newdata = predsXY, type = "response")
df.pred.s2t2 <- data.frame(Pred=prediction.gam.s2t2)
prediction.gam.s2t2 <- data.frame(predsXY[,1:2], df.pred.s2t2$Pred)

Pred.gam.s2t2 <- rasterFromXYZ(prediction.gam.s2t2, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.gam.s2t2, main=" Occurence Probability from 2010 to 2014 of Species 2 (s2_t2) by GAM")

## s2_t3
gam.s2t3 <- GAM_sp( modSpecies.s2t3)
prediction.gam.s2t3<- predict(gam.s2t3, newdata = predsXY, type = "response")
df.pred.s2t3 <- data.frame(Pred=prediction.gam.s2t3)
prediction.gam.s2t3 <- data.frame(predsXY[,1:2], df.pred.s2t3$Pred)

Pred.gam.s2t3 <- rasterFromXYZ(prediction.gam.s2t3, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.gam.s2t3, main=" Occurence Probability from 2015 to 2023 of Species 2 (s2_t3) by GAM")


###overlapping timescale###

## s2_T1
gam.s2T1 <- GAM_sp( modSpecies.s2T1)
prediction.gam.s2T1<- predict(gam.s2T1, newdata = predsXY, type = "response")
df.pred.s2T1 <- data.frame(Pred=prediction.gam.s2T1)
prediction.gam.s2T1 <- data.frame(predsXY[,1:2], df.pred.s2T1$Pred)

Pred.gam.s2T1 <- rasterFromXYZ(prediction.gam.s2T1, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.gam.s2T1, main=" Occurence Probability from 2000 to 2010 of Species 2 (s2_T1) by GAM")

## s2_T2
gam.s2T2 <- GAM_sp(modSpecies.s2T2)
prediction.gam.s2T2<- predict(gam.s2T2, newdata = predsXY, type = "response")
df.pred.s2T2 <- data.frame(Pred=prediction.gam.s2T2)
prediction.gam.s2T2 <- data.frame(predsXY[,1:2], df.pred.s2T2$Pred)

Pred.gam.s2T2 <- rasterFromXYZ(prediction.gam.s2T2, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.gam.s2T2, main=" Occurence Probability from 2000 to 2015 of Species 2 (s2_T2) by GAM")

## s2_T3
gam.s2T3 <- GAM_sp(modSpecies.s2T3)
prediction.gam.s2T3<- predict(gam.s2T3, newdata = predsXY, type = "response")
df.pred.s2T3 <- data.frame(Pred=prediction.gam.s2T3)
prediction.gam.s2T3 <- data.frame(predsXY[,1:2], df.pred.s2T3$Pred)

Pred.gam.s2T3 <- rasterFromXYZ(prediction.gam.s2T3, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.gam.s2T3, main=" Occurence Probability from 2000 to 2023 of Species 2 (s2_T3) by GAM")


#####Random Forest####

###Non-overlapping (t)

#s2_t1
rf.s2t1<-ranger_sp(modSpecies.s2t1)
Pred.rf.s2t1<- predict(
  rf.s2t1,
  data =predsXY,
  predict.all = FALSE,
  num.trees = rf.s2t1$num.trees)

prediction.rf.s2t1 <- data.frame(predsXY[,1:2], Pred.rf.s2t1$predictions)
prediction.rf.s2t1$Pred.rf.s2t1.predictions[ prediction.rf.s2t1$Pred.predictions == 1] <- 1 - 2.2e-16  #so that the probability is not 100% (too arrogant) but a smaller amount that is the most significant close to 1
Pred.rf.s2t1 <- rasterFromXYZ(prediction.rf.s2t1, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.rf.s2t1, main= " Occurence Probability from 2000-2009 of Species 2 (s2_t1) by Random Forest")


#s2_t2
rf.s2t2<-ranger_sp(modSpecies.s2t2)
Pred.rf.s2t2<- predict(
  rf.s2t2,
  data =predsXY,
  predict.all = FALSE,
  num.trees = rf.s2t2$num.trees)

prediction.rf.s2t2 <- data.frame(predsXY[,1:2], Pred.rf.s2t2$predictions)
prediction.rf.s2t2$Pred.rf.s2t2.predictions[ prediction.rf.s2t2$Pred.predictions == 1] <- 1 - 2.2e-16 
Pred.rf.s2t2 <- rasterFromXYZ(prediction.rf.s2t2, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.rf.s2t2, main= " Occurence Probability 2010-2014 of Species 2 (s2_t2) by Random Forest")

#s2_t3
rf.s2t3<-ranger_sp(modSpecies.s2t3)
Pred.rf.s2t3<- predict(
  rf.s2t3,
  data =predsXY,
  predict.all = FALSE,
  num.trees = rf.s2t3$num.trees)

prediction.rf.s2t3 <- data.frame(predsXY[,1:2], Pred.rf.s2t3$predictions)
prediction.rf.s2t3$Pred.rf.s2t3.predictions[ prediction.rf.s2t3$Pred.predictions == 1] <- 1 - 2.2e-16 
Pred.rf.s2t3 <- rasterFromXYZ(prediction.rf.s2t3, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.rf.s2t3, main= " Occurence Probability from 2015-2023 of Species 2 (s2_t3) by Random Forest")


##### overlapping timescale (T)
#s2_T1
rf.s2T1<-ranger_sp(modSpecies.s2T1)
Pred.rf.s2T1<- predict(
  rf.s2T1,
  data =predsXY,
  predict.all = FALSE,
  num.trees = rf.s2T1$num.trees)

prediction.rf.s2T1 <- data.frame(predsXY[,1:2], Pred.rf.s2T1$predictions)
prediction.rf.s2T1$Pred.rf.s2T1.predictions[ prediction.rf.s2T1$Pred.predictions == 1] <- 1 - 2.2e-16  #so that the probability is not 100% (too arrogant) but a smaller amount that is the most significant close to 1
Pred.rf.s2T1 <- rasterFromXYZ(prediction.rf.s2T1, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.rf.s2T1, main= " Occurence Probability from 2000-2010 of Species 2 (s2_T1) by Random Forest")


#s2_T2
rf.s2T2<-ranger_sp(modSpecies.s2T2)
Pred.rf.s2T2<- predict(
  rf.s2T2,
  data =predsXY,
  predict.all = FALSE,
  num.trees = rf.s2T2$num.trees)

prediction.rf.s2T2 <- data.frame(predsXY[,1:2], Pred.rf.s2T2$predictions)
prediction.rf.s2T2$Pred.rf.s2T2.predictions[ prediction.rf.s2T2$Pred.predictions == 1] <- 1 - 2.2e-16 
Pred.rf.s2T2 <- rasterFromXYZ(prediction.rf.s2T2, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.rf.s2T2, main= " Occurence Probability from 2000-2015 of Species 2 (s2_T2) by Random Forest")

#s2_T3
rf.s2T3<-ranger_sp(modSpecies.s2T3)
Pred.rf.s2T3<- predict(
  rf.s2T3,
  data =predsXY,
  predict.all = FALSE,
  num.trees = rf.s2T3$num.trees)

prediction.rf.s2T3 <- data.frame(predsXY[,1:2], Pred.rf.s2T3$predictions)
prediction.rf.s2T3$Pred.rf.s2T3.predictions[ prediction.rf.s2T3$Pred.predictions == 1] <- 1 - 2.2e-16 
Pred.rf.s2T3 <- rasterFromXYZ(prediction.rf.s2T3, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.rf.s2T3, main= " Occurence Probability from 2000-2023 of Species 2 (s2_T3) by Random Forest")



#############EVALUATION PERFORMANCE##########
auc.gam.s2.t1<- AUCFunzGAM(modSpecies.s2t1) 
auc.gam.s2.t2<- AUCFunzGAM(modSpecies.s2t2)
auc.gam.s2.t3<- AUCFunzGAM(modSpecies.s2t3)

auc.gam.s2.T1<- AUCFunzGAM(modSpecies.s2T1)
auc.gam.s2.T2<- AUCFunzGAM(modSpecies.s2T2)
auc.gam.s2.T3<- AUCFunzGAM(modSpecies.s2T3)



auc.glm.s2.t1<- AUCFunzGLM(modSpecies.s2t1)
auc.glm.s2.t2<- AUCFunzGLM(modSpecies.s2t2)
auc.glm.s2.t3<- AUCFunzGLM(modSpecies.s2t3)

auc.glm.s2.T1<- AUCFunzGLM(modSpecies.s2T1)
auc.glm.s2.T2<- AUCFunzGLM(modSpecies.s2T2)
auc.glm.s2.T3<- AUCFunzGLM(modSpecies.s2T3)



auc.rf.s2.t1<- AUCFunzRF(modSpecies.s2t1)
auc.rf.s2.t2<- AUCFunzRF(modSpecies.s2t2)
auc.rf.s2.t3<- AUCFunzRF(modSpecies.s2t3)

auc.rf.s2.T1<- AUCFunzRF(modSpecies.s2T1)
auc.rf.s2.T2<- AUCFunzRF(modSpecies.s2T2)
auc.rf.s2.T3<- AUCFunzRF(modSpecies.s2T3)



tss.glm.s2.t1<- TSSFunzGLM(modSpecies.s2t1)
tss.glm.s2.t2<- TSSFunzGLM(modSpecies.s2t2)
tss.glm.s2.t3<- TSSFunzGLM(modSpecies.s2t3)

tss.glm.s2.T1<- TSSFunzGLM(modSpecies.s2T1)
tss.glm.s2.T2<- TSSFunzGLM(modSpecies.s2T2)
tss.glm.s2.T3<- TSSFunzGLM(modSpecies.s2T3)



tss.gam.s2.t1<- TSSFunzGAM(modSpecies.s2t1)
tss.gam.s2.t2<- TSSFunzGAM(modSpecies.s2t2)
tss.gam.s2.t3<- TSSFunzGAM(modSpecies.s2t3)

tss.gam.s2.T1<- TSSFunzGAM(modSpecies.s2T1)
tss.gam.s2.T2<- TSSFunzGAM(modSpecies.s2T2)
tss.gam.s2.T3<- TSSFunzGAM(modSpecies.s2T3)



tss.rf.s2.t1<- TSSFunzRF(modSpecies.s2t1)
tss.rf.s2.t2<- TSSFunzRF(modSpecies.s2t2)
tss.rf.s2.t3<- TSSFunzRF(modSpecies.s2t3)

tss.rf.s2.T1<- TSSFunzRF(modSpecies.s2T1)
tss.rf.s2.T2<- TSSFunzRF(modSpecies.s2T2)
tss.rf.s2.T3<- TSSFunzRF(modSpecies.s2T3)



boyce.glm.s2.t1<- BoyceGLM(modSpecies.s2t1)
boyce.glm.s2.t2<- BoyceGLM(modSpecies.s2t2)
boyce.glm.s2.t3<- BoyceGLM(modSpecies.s2t3)

boyce.glm.s2.T1<- BoyceGLM(modSpecies.s2T1)
boyce.glm.s2.T2<- BoyceGLM(modSpecies.s2T2)
boyce.glm.s2.T3<- BoyceGLM(modSpecies.s2T3)


boyce.gam.s2.t1<- BoyceGAM(modSpecies.s2t1)
boyce.gam.s2.t2<- BoyceGAM(modSpecies.s2t2)
boyce.gam.s2.t3<- BoyceGAM(modSpecies.s2t3)

boyce.gam.s2.T1<- BoyceGAM(modSpecies.s2T1)
boyce.gam.s2.T2<- BoyceGAM(modSpecies.s2T2)
boyce.gam.s2.T3<- BoyceGAM(modSpecies.s2T3)


boyce.rf.s2.t1<- BoyceRF(modSpecies.s2t1)
boyce.rf.s2.t2<- BoyceRF(modSpecies.s2t2)
boyce.rf.s2.t3<- BoyceRF(modSpecies.s2t3)

boyce.rf.s2.T1<- BoyceRF(modSpecies.s2T1)
boyce.rf.s2.T2<- BoyceRF(modSpecies.s2T2)
boyce.rf.s2.T3<- BoyceRF(modSpecies.s2T3)



##better GPT rcm
algorithm<- rep(c("GAM", "GLM", "RF"), each=6)
temporal_setting<-rep(c("t1", "t2", "t3", 'T1', "T2", "T3"), times = 3)
temporal_setting<- rep(c("non-overlapping", "overlapping"),each=3, times=3)
AUC <- c(auc.gam.s2.t1,auc.gam.s2.T1, auc.gam.s2.t2, auc.gam.s2.T2, auc.gam.s2.t3, auc.gam.s2.T3,
         auc.glm.s2.t1,auc.glm.s2.T1, auc.glm.s2.t2, auc.glm.s2.T2, auc.glm.s2.t3, auc.glm.s2.T3,
         auc.rf.s2.t1,auc.rf.s2.T1, auc.rf.s2.t2, auc.rf.s2.T2, auc.rf.s2.t3, auc.rf.s2.T3)
TSS<- c(tss.gam.s2.t1, tss.gam.s2.T1, tss.gam.s2.t2, tss.gam.s2.T2, tss.gam.s2.t3, tss.gam.s2.T3,
        tss.glm.s2.t1, tss.glm.s2.T1, tss.glm.s2.t2, tss.glm.s2.T2, tss.glm.s2.t3, tss.glm.s2.T3,
        tss.rf.s2.t1, tss.rf.s2.T1, tss.rf.s2.t2, tss.rf.s2.T2, tss.rf.s2.t3, tss.rf.s2.T3)
Boyce<- c(boyce.gam.s2.t1, boyce.gam.s2.T1, boyce.gam.s2.t2, boyce.gam.s2.T2, boyce.gam.s2.t3, boyce.gam.s2.T3,
          boyce.glm.s2.t1, boyce.glm.s2.T1, boyce.glm.s2.t2, boyce.glm.s2.T2, boyce.glm.s2.t3, boyce.glm.s2.T3,
          boyce.rf.s2.t1, boyce.rf.s2.T1, boyce.rf.s2.t2, boyce.rf.s2.T2, boyce.rf.s2.t3, boyce.rf.s2.T3)
perf_df <- data.frame(algorithm, temporal_setting,temporal_period, AUC, TSS, Boyce)

mean_perf <- perf_df %>%
  group_by(algorithm, temporal_setting) %>%
  summarize(AUC = mean(AUC), TSS = mean(TSS), Boyce = mean(Boyce))

# Melt the data frame to long format for plotting
melted_perf <- mean_perf %>% 
  pivot_longer(cols = c(AUC, TSS, Boyce), names_to = "metric", values_to = "value")

# Create scatterplot with mean performance values
ggplot(melted_perf, aes(x = algorithm, y = value, color = temporal_setting, shape = temporal_setting)) +
  geom_point(size = 5) +
  facet_grid(.~metric, scales = "free_y", space = "free_x") +
  labs(title = "Mean Performance of SDM Algorithms for Virtual Species 2", x = "Algorithms", y = "Mean Performance") +
  scale_color_manual(values = c("blue", "red")) +
  scale_shape_manual(values = c(22, 25)) +
  theme_minimal()+
  theme(panel.border = element_rect(color = "black", fill = NA),
        panel.background = element_rect(fill = "white"))


################################################################################################################        
##############################################VIRTUAL SPECIES 3################################################# 
################################################################################################################
para_s3<- formatFunctions(temp=c(fun='dnorm', mean = 23.45, sd = 4.05),
                          preci=c(fun='dnorm', mean =2250, sd=1250),
                          elev= c(fun='dnorm', mean=750, sd=750))

s3<- generateSpFromFun(raster.stack = envi[[c("temp", "preci", "elev")]],parameters = para_s3, plot = TRUE)
s3_pa <- convertToPA(s3, prob.method="logistic",alpha = -0.05, beta = "random", species.prevalence= 0.3)

s3_suit<-plotSuitabilityToProba(s3_pa)
s3_res<-plotResponse(s3_pa)

#T=sum, overlap
s3_T1 <- sampleOccurrences(s3_pa,n = 7961,type = "presence-absence", extract.probability = TRUE,plot = T, replacement = T,sample.prevalence = 0.25)
s3_T2 <- sampleOccurrences(s3_pa,n = 12200,type = "presence-absence", extract.probability = TRUE,plot = F, replacement=T, sample.prevalence = 0.25)
s3_T3 <- sampleOccurrences(s3_pa,n = 41439,type = "presence-absence", extract.probability = TRUE,plot = F, replacement = T, sample.prevalence = 0.25)
#t=single range, not overlap
s3_t1 <- sampleOccurrences(s3_pa,n = 7961,type = "presence-absence", extract.probability = TRUE,plot = F, replacement = T,sample.prevalence = 0.25)
s3_t2 <- sampleOccurrences(s3_pa,n = 9916,type = "presence-absence", extract.probability = TRUE,plot = F, replacement = T, sample.prevalence = 0.25)
s3_t3 <- sampleOccurrences(s3_pa,n = 34697,type = "presence-absence", extract.probability = TRUE,plot = F, replacement = T, sample.prevalence = 0.25)

########GLM########
####non overlapping time scale (t)
##s3_t1
#extract PA points, then exchange it into geographical vari by giving it coordinates and crs
PresAbs.s3t1=s3_t1$sample.points[, c( "x", "y", "Observed")]
coordinates(PresAbs.s3t1)<-~x+y
crs(PresAbs.s3t1)<-crs(envi)

#extract the envi vari value in the coordinates of each sample points 
values.s3t1<- raster::extract(envi, PresAbs.s3t1, df=T)
values.s3t1<- values.s3t1[, -1] # first column not need it
modSpecies.s3t1<-data.frame(pres= PresAbs.s3t1$Observed, values.s3t1[1:ncol(values.s3t1)])

preds<- envi
glm.s3t1<-multGLM(modSpecies.s3t1, sp.cols = 1, var.cols=2:ncol(modSpecies.s3t1), family = "binomial", trim = FALSE, step=F,Y.prediction =FALSE, P.prediction =TRUE,FDR = FALSE, Favourability =FALSE, test.sample = 0.2) 
Pred.glm.s3t1<- getPreds(preds, models=glm.s3t1$models, id.col = NULL, Y = FALSE, P = TRUE, Favourability =FALSE)
prediction.glm.s3t1<- data.frame(glm.s3t1$predictions)
crs(Pred.glm.s3t1) <- crs(envi)
plot(Pred.glm.s3t1, main= "Occurence Probability from 2000 to 2009 of Species 3 (s3_t1) by GLM")


##s3_t2
#extract PA points, then exchange it into geographical vari by giving it coordinates and crs
PresAbs.s3t2=s3_t2$sample.points[, c( "x", "y", "Observed")]
coordinates(PresAbs.s3t2)<-~x+y
crs(PresAbs.s3t2)<-crs(envi)

#extract the envi vari value in the coordinates of each sample points 
values.s3t2<- raster::extract(envi, PresAbs.s3t2, df=T)
values.s3t2<- values.s3t2[, -1] # first column not need it
modSpecies.s3t2<-data.frame(pres= PresAbs.s3t2$Observed, values.s3t2[1:ncol(values.s3t2)])

preds<- envi
glm.s3t2<-multGLM(modSpecies.s3t2, sp.cols = 1, var.cols=2:ncol(modSpecies.s3t2), family = "binomial", trim = FALSE, step=F,Y.prediction =FALSE, P.prediction =TRUE,FDR = FALSE, Favourability =FALSE, test.sample = 0.2) 
Pred.glm.s3t2<- getPreds(preds, models=glm.s3t2$models, id.col = NULL, Y = FALSE, P = TRUE, Favourability =FALSE)
crs(Pred.glm.s3t2) <- crs(envi)
plot(Pred.glm.s3t2, main= "Occurence Probability from 2010 to 2014 of Species 3 (s3_t2) by GLM")


#s3_t3
#extract PA points, then exchange it into geographical vari by giving it coordinates and crs
PresAbs.s3t3=s3_t3$sample.points[, c( "x", "y", "Observed")]
coordinates(PresAbs.s3t3)<-~x+y
crs(PresAbs.s3t3)<-crs(envi)

#extract the envi vari value in the coordinates of each sample points 
values.s3t3<- raster::extract(envi, PresAbs.s3t3, df=T)
values.s3t3<- values.s3t3[, -1] # first column not need it
modSpecies.s3t3<-data.frame(pres= PresAbs.s3t3$Observed, values.s3t3[1:ncol(values.s3t3)])

preds<- envi
glm.s3t3<-multGLM(modSpecies.s3t3, sp.cols = 1, var.cols=2:ncol(modSpecies.s3t3), family = "binomial", trim = FALSE, step=F,Y.prediction =FALSE, P.prediction =TRUE,FDR = FALSE, Favourability =FALSE, test.sample = 0.2) 
Pred.glm.s3t3<- getPreds(preds, models=glm.s3t3$models, id.col = NULL, Y = FALSE, P = TRUE, Favourability =FALSE)
crs(Pred.glm.s3t3) <- crs(envi)
plot(Pred.glm.s3t3, main= "Occurence Probability from 2015 to 2023 of Species 3 (s3_t3) by GLM")


####overlapping timescale (T)
##s3_T1

#extract PA points, then exchange it into geographical vari by giving it coordinates and crs
PresAbs.s3T1=s3_T1$sample.points[, c( "x", "y", "Observed")]
coordinates(PresAbs.s3T1)<-~x+y
crs(PresAbs.s3T1)<-crs(envi)

#extract the envi vari value in the coordinates of each sample points 
values.s3T1<- raster::extract(envi, PresAbs.s3T1, df=T)
values.s3T1<- values.s3T1[, -1] # first column not need it
modSpecies.s3T1<-data.frame(pres= PresAbs.s3T1$Observed,values.s3T1[1:ncol(values.s3T1)])

preds<- envi
glm.s3T1<-multGLM(modSpecies.s3T1, sp.cols = 1, var.cols=2:ncol(modSpecies.s3T1), family = "binomial", trim = FALSE, step=F,Y.prediction =FALSE, P.prediction =TRUE,FDR = FALSE, Favourability =FALSE, test.sample = 0.2) 
Pred.glm.s3T1<- getPreds(preds, models=glm.s3T1$models, id.col = NULL, Y = FALSE, P = TRUE, Favourability =FALSE)
crs(Pred.glm.s3T1) <- crs(envi)
plot(Pred.glm.s3T1, main= "Occurence Probability from 2000 to 2010 of Species 3 (s3_T1) by GLM")


##s3_T2
PresAbs.s3T2=s3_T2$sample.points[, c( "x", "y", "Observed")]
coordinates(PresAbs.s3T2)<-~x+y
crs(PresAbs.s3T2)<-crs(envi)

#extract the envi vari value in the coordinates of each sample points 
values.s3T2<- raster::extract(envi, PresAbs.s3T2, df=T)
values.s3T2<- values.s3T2[, -1] # first column not need it
modSpecies.s3T2<-data.frame(pres= PresAbs.s3T2$Observed, values.s3T2[1:ncol(values.s3T2)])

preds<- envi
glm.s3T2<-multGLM(modSpecies.s3T2, sp.cols = 1, var.cols=2:ncol(modSpecies.s3T2), family = "binomial", trim = FALSE, step=F,Y.prediction =FALSE, P.prediction =TRUE,FDR = FALSE, Favourability =FALSE, test.sample = 0.2) 
Pred.glm.s3T2<- getPreds(preds, models=glm.s3T2$models, id.col = NULL, Y = FALSE, P = TRUE, Favourability =FALSE)
crs(Pred.glm.s3T2) <- crs(envi)
plot(Pred.glm.s3T2, main= "Occurence Probability from 2000 to 2015 of Species 3 (s3_T2) by GLM")

##s3_T3
PresAbs.s3T3=s3_T3$sample.points[, c( "x", "y", "Observed")]
coordinates(PresAbs.s3T3)<-~x+y
crs(PresAbs.s3T3)<-crs(envi)

#extract the envi vari value in the coordinates of each sample points 
values.s3T3<- raster::extract(envi, PresAbs.s3T3, df=T)
values.s3T3<- values.s3T3[, -1] # first column not need it
modSpecies.s3T3<-data.frame(pres= PresAbs.s3T3$Observed, values.s3T3[1:ncol(values.s3T3)])

preds<- envi
glm.s3T3<-multGLM(modSpecies.s3T3, sp.cols = 1, var.cols=2:ncol(modSpecies.s3T3), family = "binomial", trim = FALSE, step=F,Y.prediction =FALSE, P.prediction =TRUE,FDR = FALSE, Favourability =FALSE, test.sample = 0.2) 
Pred.glm.s3T3<- getPreds(preds, models=glm.s3T3$models, id.col = NULL, Y = FALSE, P = TRUE, Favourability =FALSE)
crs(Pred.glm.s3T3) <- crs(envi)
plot(Pred.glm.s3T3, main= "Occurence Probability from 2000 to 2023 of Species 3 (s3_T3) by GLM")


###########GAM########

## newdata for prediction
preds <- as.data.frame(envi) %>%drop_na()
predsXY <- as.data.frame(envi, xy=T) %>%drop_na()
###Non-overlapping time scale

## s3_t1
gam.s3t1 <- GAM_sp(modSpecies.s3t1)
prediction.gam.s3t1<- predict(gam.s3t1, newdata = predsXY, type = "response")
df.pred.s3t1 <- data.frame(Pred=prediction.gam.s3t1)
prediction.gam.s3t1 <- data.frame(predsXY[,1:2], df.pred.s3t1$Pred)

Pred.gam.s3t1 <- rasterFromXYZ(prediction.gam.s3t1, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.gam.s3t1, main=" Occurence Probability from 2000 to 2009 of Species 3 (s3_t1) by GAM")

## s3_t2
gam.s3t2 <- GAM_sp(modSpecies.s3t2)
prediction.gam.s3t2<- predict(gam.s3t2, newdata = predsXY, type = "response")
df.pred.s3t2 <- data.frame(Pred=prediction.gam.s3t2)
prediction.gam.s3t2 <- data.frame(predsXY[,1:2], df.pred.s3t2$Pred)

Pred.gam.s3t2 <- rasterFromXYZ(prediction.gam.s3t2, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.gam.s3t2, main=" Occurence Probability from 2010 to 2014 of Species 3 (s3_t2) by GAM")

## s3_t3
gam.s3t3 <- GAM_sp(modSpecies.s3t3)
prediction.gam.s3t3<- predict(gam.s3t3, newdata = predsXY, type = "response")
df.pred.s3t3 <- data.frame(Pred=prediction.gam.s3t3)
prediction.gam.s3t3 <- data.frame(predsXY[,1:2], df.pred.s3t3$Pred)

Pred.gam.s3t3 <- rasterFromXYZ(prediction.gam.s3t3, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.gam.s3t3, main=" Occurence Probability from 2015 to 2023 of Species 3 (s3_t3) by GAM")


###overlapping timescale###

## s3_T1
gam.s3T1 <- GAM_sp( modSpecies.s3T1)
prediction.gam.s3T1<- predict(gam.s3T1, newdata = predsXY, type = "response")
df.pred.s3T1 <- data.frame(Pred=prediction.gam.s3T1)
prediction.gam.s3T1 <- data.frame(predsXY[,1:2], df.pred.s3T1$Pred)

Pred.gam.s3T1 <- rasterFromXYZ(prediction.gam.s3T1, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.gam.s3T1, main=" Occurence Probability from 2000 to 2010 of Species 3 (s3_T1) by GAM")

## s3_T2
gam.s3T2 <- GAM_sp(modSpecies.s3T2)
prediction.gam.s3T2<- predict(gam.s3T2, newdata = predsXY, type = "response")
df.pred.s3T2 <- data.frame(Pred=prediction.gam.s3T2)
prediction.gam.s3T2 <- data.frame(predsXY[,1:2], df.pred.s3T2$Pred)

Pred.gam.s3T2 <- rasterFromXYZ(prediction.gam.s3T2, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.gam.s3T2, main=" Occurence Probability from 2000 to 2015 of Species 3 (s3_T2) by GAM")

## s3_T3
gam.s3T3 <- GAM_sp(modSpecies.s3T3)
prediction.gam.s3T3<- predict(gam.s3T3, newdata = predsXY, type = "response")
df.pred.s3T3 <- data.frame(Pred=prediction.gam.s3T3)
prediction.gam.s3T3 <- data.frame(predsXY[,1:2], df.pred.s3T3$Pred)

Pred.gam.s3T3 <- rasterFromXYZ(prediction.gam.s3T3, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.gam.s3T3, main=" Occurence Probability from 2000 to 2023 of Species 3 (s3_T3) by GAM")


###########Random Forest##########
###Non-overlapping (t)

#s3_t1
rf.s3t1<-ranger_sp(modSpecies.s3t1)
Pred.rf.s3t1<- predict(
  rf.s3t1,
  data =predsXY,
  predict.all = FALSE,
  num.trees = rf.s3t1$num.trees)

prediction.rf.s3t1 <- data.frame(predsXY[,1:2], Pred.rf.s3t1$predictions)
prediction.rf.s3t1$Pred.rf.s3t1.predictions[ prediction.rf.s3t1$Pred.predictions == 1] <- 1 - 2.2e-16  #so that the probability is not 100% (too arrogant) but a smaller amount that is the most significant close to 1
Pred.rf.s3t1 <- rasterFromXYZ(prediction.rf.s3t1, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.rf.s3t1, main= " Occurence Probability from 2000-2009 of Species 3 (s3_t1) by Random Forest")


#s3_t2
rf.s3t2<-ranger_sp(modSpecies.s3t2)
Pred.rf.s3t2<- predict(
  rf.s3t2,
  data =predsXY,
  predict.all = FALSE,
  num.trees = rf.s3t2$num.trees)

prediction.rf.s3t2 <- data.frame(predsXY[,1:2], Pred.rf.s3t2$predictions)
prediction.rf.s3t2$Pred.rf.s3t2.predictions[ prediction.rf.s3t2$Pred.predictions == 1] <- 1 - 2.2e-16 
Pred.rf.s3t2 <- rasterFromXYZ(prediction.rf.s3t2, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.rf.s3t2, main= " Occurence Probability 2010-2014 of Species 3 (s3_t2) by Random Forest")

#s3_t3
rf.s3t3<-ranger_sp(modSpecies.s3t3)
Pred.rf.s3t3<- predict(
  rf.s3t3,
  data =predsXY,
  predict.all = FALSE,
  num.trees = rf.s3t3$num.trees)

prediction.rf.s3t3 <- data.frame(predsXY[,1:2], Pred.rf.s3t3$predictions)
prediction.rf.s3t3$Pred.rf.s3t3.predictions[ prediction.rf.s3t3$Pred.predictions == 1] <- 1 - 2.2e-16 
Pred.rf.s3t3 <- rasterFromXYZ(prediction.rf.s3t3, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.rf.s3t3, main= " Occurence Probability from 2015-2023 of Species 3 (s3_t3) by Random Forest")


## overlapping timescale (T)
#s3_T1
rf.s3T1<-ranger_sp(modSpecies.s3T1)
Pred.rf.s3T1<- predict(
  rf.s3T1,
  data =predsXY,
  predict.all = FALSE,
  num.trees = rf.s3T1$num.trees)

prediction.rf.s3T1 <- data.frame(predsXY[,1:2], Pred.rf.s3T1$predictions)
prediction.rf.s3T1$Pred.rf.s3T1.predictions[ prediction.rf.s3T1$Pred.predictions == 1] <- 1 - 2.2e-16  #so that the probability is not 100% (too arrogant) but a smaller amount that is the most significant close to 1
Pred.rf.s3T1 <- rasterFromXYZ(prediction.rf.s3T1, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.rf.s3T1, main= " Occurence Probability from 2000-2010 of Species 3 (s3_T1) by Random Forest")


#s3_T2
rf.s3T2<-ranger_sp(modSpecies.s3T2)
Pred.rf.s3T2<- predict(
  rf.s3T2,
  data =predsXY,
  predict.all = FALSE,
  num.trees = rf.s3T2$num.trees)

prediction.rf.s3T2 <- data.frame(predsXY[,1:2], Pred.rf.s3T2$predictions)
prediction.rf.s3T2$Pred.rf.s3T2.predictions[ prediction.rf.s3T2$Pred.predictions == 1] <- 1 - 2.2e-16 
Pred.rf.s3T2 <- rasterFromXYZ(prediction.rf.s3T2, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.rf.s3T2, main= " Occurence Probability from 2000-2015 of Species 3 (s3_T2) by Random Forest")

#s3_T3
rf.s3T3<-ranger_sp(modSpecies.s3T3)
Pred.rf.s3T3<- predict(
  rf.s3T3,
  data =predsXY,
  predict.all = FALSE,
  num.trees = rf.s3T3$num.trees)

prediction.rf.s3T3 <- data.frame(predsXY[,1:2], Pred.rf.s3T3$predictions)
prediction.rf.s3T3$Pred.rf.s3T3.predictions[ prediction.rf.s3T3$Pred.predictions == 1] <- 1 - 2.2e-16 
Pred.rf.s3T3 <- rasterFromXYZ(prediction.rf.s3T3, crs="+proj=longlat +datum=WGS84 +no_defs")
plot(Pred.rf.s3T3, main= " Occurence Probability from 2000-2023 of Species 3 (s3_T3) by Random Forest")



#############EVALUATION PERFORMANCE##########
auc.gam.s3.t1<- AUCFunzGAM(modSpecies.s3t1) 
auc.gam.s3.t2<- AUCFunzGAM(modSpecies.s3t2)
auc.gam.s3.t3<- AUCFunzGAM(modSpecies.s3t3)

auc.gam.s3.T1<- AUCFunzGAM(modSpecies.s3T1)
auc.gam.s3.T2<- AUCFunzGAM(modSpecies.s3T2)
auc.gam.s3.T3<- AUCFunzGAM(modSpecies.s3T3)



auc.glm.s3.t1<- AUCFunzGLM(modSpecies.s3t1)
auc.glm.s3.t2<- AUCFunzGLM(modSpecies.s3t2)
auc.glm.s3.t3<- AUCFunzGLM(modSpecies.s3t3)

auc.glm.s3.T1<- AUCFunzGLM(modSpecies.s3T1)
auc.glm.s3.T2<- AUCFunzGLM(modSpecies.s3T2)
auc.glm.s3.T3<- AUCFunzGLM(modSpecies.s3T3)



auc.rf.s3.t1<- AUCFunzRF(modSpecies.s3t1)
auc.rf.s3.t2<- AUCFunzRF(modSpecies.s3t2)
auc.rf.s3.t3<- AUCFunzRF(modSpecies.s3t3)

auc.rf.s3.T1<- AUCFunzRF(modSpecies.s3T1)
auc.rf.s3.T2<- AUCFunzRF(modSpecies.s3T2)
auc.rf.s3.T3<- AUCFunzRF(modSpecies.s3T3)



tss.glm.s3.t1<- TSSFunzGLM(modSpecies.s3t1)
tss.glm.s3.t2<- TSSFunzGLM(modSpecies.s3t2)
tss.glm.s3.t3<- TSSFunzGLM(modSpecies.s3t3)

tss.glm.s3.T1<- TSSFunzGLM(modSpecies.s3T1)
tss.glm.s3.T2<- TSSFunzGLM(modSpecies.s3T2)
tss.glm.s3.T3<- TSSFunzGLM(modSpecies.s3T3)



tss.gam.s3.t1<- TSSFunzGAM(modSpecies.s3t1)
tss.gam.s3.t2<- TSSFunzGAM(modSpecies.s3t2)
tss.gam.s3.t3<- TSSFunzGAM(modSpecies.s3t3)

tss.gam.s3.T1<- TSSFunzGAM(modSpecies.s3T1)
tss.gam.s3.T2<- TSSFunzGAM(modSpecies.s3T2)
tss.gam.s3.T3<- TSSFunzGAM(modSpecies.s3T3)



tss.rf.s3.t1<- TSSFunzRF(modSpecies.s3t1)
tss.rf.s3.t2<- TSSFunzRF(modSpecies.s3t2)
tss.rf.s3.t3<- TSSFunzRF(modSpecies.s3t3)

tss.rf.s3.T1<- TSSFunzRF(modSpecies.s3T1)
tss.rf.s3.T2<- TSSFunzRF(modSpecies.s3T2)
tss.rf.s3.T3<- TSSFunzRF(modSpecies.s3T3)



boyce.glm.s3.t1<- BoyceGLM(modSpecies.s3t1)
boyce.glm.s3.t2<- BoyceGLM(modSpecies.s3t2)
boyce.glm.s3.t3<- BoyceGLM(modSpecies.s3t3)

boyce.glm.s3.T1<- BoyceGLM(modSpecies.s3T1)
boyce.glm.s3.T2<- BoyceGLM(modSpecies.s3T2)
boyce.glm.s3.T3<- BoyceGLM(modSpecies.s3T3)


boyce.gam.s3.t1<- BoyceGAM(modSpecies.s3t1)
boyce.gam.s3.t2<- BoyceGAM(modSpecies.s3t2)
boyce.gam.s3.t3<- BoyceGAM(modSpecies.s3t3)

boyce.gam.s3.T1<- BoyceGAM(modSpecies.s3T1)
boyce.gam.s3.T2<- BoyceGAM(modSpecies.s3T2)
boyce.gam.s3.T3<- BoyceGAM(modSpecies.s3T3)


boyce.rf.s3.t1<- BoyceRF(modSpecies.s3t1)
boyce.rf.s3.t2<- BoyceRF(modSpecies.s3t2)
boyce.rf.s3.t3<- BoyceRF(modSpecies.s3t3)

boyce.rf.s3.T1<- BoyceRF(modSpecies.s3T1)
boyce.rf.s3.T2<- BoyceRF(modSpecies.s3T2)
boyce.rf.s3.T3<- BoyceRF(modSpecies.s3T3)



##better GPT rcm
algorithm<- rep(c("GAM", "GLM", "RF"), each=6)
temporal_setting<-rep(c("t1", "t2", "t3", 'T1', "T2", "T3"), times = 3)
temporal_setting<- rep(c("non-overlapping", "overlapping"),each=3, times=3)
AUC <- c(auc.gam.s3.t1,auc.gam.s3.T1, auc.gam.s3.t2, auc.gam.s3.T2, auc.gam.s3.t3, auc.gam.s3.T3,
         auc.glm.s3.t1,auc.glm.s3.T1, auc.glm.s3.t2, auc.glm.s3.T2, auc.glm.s3.t3, auc.glm.s3.T3,
         auc.rf.s3.t1,auc.rf.s3.T1, auc.rf.s3.t2, auc.rf.s3.T2, auc.rf.s3.t3, auc.rf.s3.T3)
TSS<- c(tss.gam.s3.t1, tss.gam.s3.T1, tss.gam.s3.t2, tss.gam.s3.T2, tss.gam.s3.t3, tss.gam.s3.T3,
        tss.glm.s3.t1, tss.glm.s3.T1, tss.glm.s3.t2, tss.glm.s3.T2, tss.glm.s3.t3, tss.glm.s3.T3,
        tss.rf.s3.t1, tss.rf.s3.T1, tss.rf.s3.t2, tss.rf.s3.T2, tss.rf.s3.t3, tss.rf.s3.T3)
Boyce<- c(boyce.gam.s3.t1, boyce.gam.s3.T1, boyce.gam.s3.t2, boyce.gam.s3.T2, boyce.gam.s3.t3, boyce.gam.s3.T3,
          boyce.glm.s3.t1, boyce.glm.s3.T1, boyce.glm.s3.t2, boyce.glm.s3.T2, boyce.glm.s3.t3, boyce.glm.s3.T3,
          boyce.rf.s3.t1, boyce.rf.s3.T1, boyce.rf.s3.t2, boyce.rf.s3.T2, boyce.rf.s3.t3, boyce.rf.s3.T3)
perf_df <- data.frame(algorithm, temporal_setting,temporal_period, AUC, TSS, Boyce)

mean_perf <- perf_df %>%
  group_by(algorithm, temporal_setting) %>%
  summarize(AUC = mean(AUC), TSS = mean(TSS), Boyce = mean(Boyce))

# Melt the data frame to long format for plotting
melted_perf <- mean_perf %>% 
  pivot_longer(cols = c(AUC, TSS, Boyce), names_to = "metric", values_to = "value")

# Create scatterplot with mean performance values
ggplot(melted_perf, aes(x = algorithm, y = value, color = temporal_setting, shape = temporal_setting)) +
  geom_point(size = 5) +
  facet_grid(.~metric, scales = "free_y", space = "free_x") +
  labs(title = "Mean Performance of SDM Algorithms for Virtual Species 3", x = "Algorithms", y = "Mean Performance") +
  scale_color_manual(values = c("blue", "red")) +
  scale_shape_manual(values = c(22, 25)) +
  theme_minimal()+
  theme(panel.border = element_rect(color = "black", fill = NA),
        panel.background = element_rect(fill = "white"))




